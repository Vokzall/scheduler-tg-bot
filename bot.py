#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
"""
import asyncio
import logging
import signal
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from config import Config
import handlers
from database import init_db
from utils import ensure_profile_image
from scheduler import SchedulerManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler(Config.LOG_PATH),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_instance = None
scheduler_manager = None

async def send_maintenance_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö"""
    try:
        if app_instance:
            await app_instance.bot.send_message(
                chat_id=Config.ADMIN_ID,
                text="‚ö†Ô∏èüöß –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. "
                     "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º. "
                     "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üõ†Ô∏è‚è≥"
            )
    except Exception as e:
        logger.error(f"Failed to send maintenance notification: {e}")

async def send_shutdown_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    try:
        if app_instance:
            await app_instance.bot.send_message(
                chat_id=Config.ADMIN_ID,
                text="üõëüîå –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                     "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. "
                     "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! ‚ö†Ô∏èüîß"
            )
    except Exception as e:
        logger.error(f"Failed to send shutdown notification: {e}")

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    app.add_handler(CommandHandler("start", handlers.start_cmd))
    app.add_handler(CommandHandler("stats", handlers.stats_cmd))
    
    app.add_handler(CallbackQueryHandler(handlers.open_calendar_cb, pattern=r"^open_calendar:"))
    app.add_handler(CallbackQueryHandler(handlers.day_selection_cb, pattern=r"^daysel:"))
    app.add_handler(CallbackQueryHandler(handlers.chmonth_cb, pattern=r"^chmonth:"))
    app.add_handler(CallbackQueryHandler(handlers.hoursel_cb, pattern=r"^hoursel:"))
    app.add_handler(CallbackQueryHandler(handlers.minute_select_cb, pattern=r"^minutesel:"))
    app.add_handler(CallbackQueryHandler(handlers.lead_select_cb, pattern=r"^lead:"))
    app.add_handler(CallbackQueryHandler(handlers.confirm_reminder_cb, pattern=r"^confirm_reminder$"))
    
    app.add_handler(CallbackQueryHandler(handlers.today_tasks_cb, pattern=r"^today_tasks$"))
    app.add_handler(CallbackQueryHandler(handlers.add_task_cb, pattern=r"^add_task$"))
    app.add_handler(CallbackQueryHandler(handlers.toggle_task_cb, pattern=r"^toggle_task:"))
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback
    app.add_handler(CallbackQueryHandler(handlers.unknown_cb))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.text_message_handler))

async def main():
    global app_instance, scheduler_manager
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    init_db()
    ensure_profile_image()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = ApplicationBuilder().token(Config.TOKEN).build()
    app_instance = app
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_handlers(app)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_manager = SchedulerManager(app)
    app.scheduler_manager = scheduler_manager 
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await scheduler_manager.start_scheduler()
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    scheduler_manager.scheduler.add_job(
        scheduler_manager.rollover_pending_tasks,
        trigger="cron",
        hour=0,
        minute=0,
        timezone=Config.TZ
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await scheduler_manager.schedule_existing_reminders()
    
    logger.info("Bot starting...")
    await app.initialize()
    await app.start()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ADMIN_ID –≤–∞–ª–∏–¥–µ–Ω)
    if Config.ADMIN_ID != 0:
        try:
            await app.bot.send_message(
                chat_id=Config.ADMIN_ID,
                text="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ"
            )
        except Exception as e:
            logger.error(f"Failed to send startup notification: {e}")
    else:
        logger.warning("ADMIN_ID is not set, skipping startup notification")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    loop = asyncio.get_running_loop()
    for signame in ('SIGINT', 'SIGTERM'):
        loop.add_signal_handler(
            getattr(signal, signame),
            lambda: asyncio.create_task(shutdown(app))
        )
    
    await app.updater.start_polling()
    
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        logger.info("Shutdown signal received...")
        await shutdown(app)

async def shutdown(app):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("Shutting down...")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ADMIN_ID –≤–∞–ª–∏–¥–µ–Ω)
        if Config.ADMIN_ID != 0:
            await send_shutdown_notification()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await app.updater.stop()
        await app.stop()
        await app.shutdown()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler_manager:
            scheduler_manager.scheduler.shutdown()
    except Exception as e:
        logger.error(f"Error during shutdown: {e}", exc_info=True)
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
        logger.info("Bot shutdown complete")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception("Fatal error in main")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if Config.ADMIN_ID != 0:
                asyncio.run(send_shutdown_notification())
        except:
            pass