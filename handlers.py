import asyncio
import logging
import calendar
from datetime import datetime, date, timedelta
from zoneinfo import ZoneInfo
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import ContextTypes
from config import Config
from utils import ensure_profile_image, user_now, safe_edit_message, build_hours_keyboard
from database import execute_sql, get_connection

logger = logging.getLogger(__name__)

class Messages:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    @staticmethod
    def welcome(user_name: str) -> str:
        return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ‚Äî Scheduler Bot üìÖ\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é —Ä—è–¥–æ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    
    @staticmethod
    def start_actions() -> str:
        return "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á
    @staticmethod
    def no_tasks() -> str:
        return "üìã –°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç!"
    
    @staticmethod
    def task_list_header() -> str:
        return "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"
    
    @staticmethod
    def task_item(completed: bool, description: str, date_info: str = "") -> str:
        emoji = "‚úÖ" if completed else "‚ùå"
        return f"{emoji} {description}{date_info}"
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    @staticmethod
    def reminder_created(title: str, time_str: str, lead: int) -> str:
        return (
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìù –°–æ–±—ã—Ç–∏–µ: {title}\n"
            f"üìÖ –î–∞—Ç–∞: {time_str}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {lead} –º–∏–Ω."
        )
    
    @staticmethod
    def no_reminders() -> str:
        return "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!"
    
    @staticmethod
    def reminders_list_header() -> str:
        return "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"
    
    @staticmethod
    def reminder_item(title: str, time_str: str, lead: int) -> str:
        return f"‚Ä¢ {title} - {time_str} (–Ω–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ {lead} –º–∏–Ω.)"
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    @staticmethod
    def maintenance_notification() -> str:
        return (
            "‚ö†Ô∏èüöß –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. "
            "–ú—ã —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏! üõ†Ô∏è‚è≥ –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
        )
    
    @staticmethod
    def bot_about() -> str:
        return (
            "‚ÑπÔ∏è –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ –¥–µ–Ω—å ‚úÖ\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö ‚è∞\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üìä"
        )

# UI keyboard (persistent)
REPLY_KEYBOARD = ReplyKeyboardMarkup(
    [[KeyboardButton("üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton("‚úÖ –°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
     [KeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ"), KeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
     [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]],
    resize_keyboard=True
)

def build_month_keyboard(year, month, mode="view", disable_past=True):
    cal = calendar.Calendar(firstweekday=0)
    today = datetime.now(ZoneInfo(Config.TZ)).date()
    kb = []
    
    # Add emoji to title based on mode
    emoji = "üìÖ"
    if mode == "create_reminder": emoji = "‚è∞"
    elif mode == "view_tasks": emoji = "‚úÖ"
    
    kb.append([InlineKeyboardButton(f"{emoji} {calendar.month_name[month]} {year}", callback_data="noop")])
    kb.append([InlineKeyboardButton(w, callback_data="noop") for w in ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]])
    
    for week in cal.monthdayscalendar(year, month):
        row = []
        for d in week:
            if d == 0: 
                row.append(InlineKeyboardButton(" ", callback_data="noop"))
            else:
                dt = date(year, month, d)
                if disable_past and dt < today:
                    row.append(InlineKeyboardButton("¬∑", callback_data="noop"))
                else:
                    today_indicator = "üü¢" if dt == today else ""
                    row.append(InlineKeyboardButton(
                        f"{today_indicator}{d}", 
                        callback_data=f"daysel:{mode}:{year}:{month}:{d}"
                    ))
        kb.append(row)
    
    kb.append([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"chmonth:{mode}:{year}:{month-1}"),
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è üü¢", callback_data=f"chmonth:{mode}:today"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"chmonth:{mode}:{year}:{month+1}")
    ])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")])
    return InlineKeyboardMarkup(kb)


def format_original_date(original_iso, today_iso):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not original_iso or original_iso == today_iso:
        return ""
    
    try:
        orig_date = date.fromisoformat(original_iso)
        today_date = date.fromisoformat(today_iso)
        days_diff = (today_date - orig_date).days
        
        if days_diff == 0:
            return ""
        elif days_diff == 1:
            return " (–≤—á–µ—Ä–∞)"
        elif days_diff < 7:
            return f" ({days_diff} –¥–Ω. –Ω–∞–∑–∞–¥)"
        else:
            return f" ({orig_date.strftime('%d.%m.%Y')})"
    except:
        return ""


def normalize_month(year, month):
    while month < 1: 
        year -= 1
        month += 12
    while month > 12: 
        year += 1
        month -= 12
    return year, month

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_profile_image()
    user = update.effective_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user.first_name or ""
    if user.last_name:
        user_name = f"{user_name} {user.last_name}".strip()
    user_name = user_name or "–¥—Ä—É–≥"
    
    welcome_text = Messages.welcome(user_name)
    
    try:
        with open(Config.PROFILE_PNG, "rb") as f:
            await update.message.reply_photo(photo=InputFile(f), caption=welcome_text)
    except Exception:
        await update.message.reply_text(welcome_text)
    
    await update.message.reply_text(Messages.start_actions(), reply_markup=REPLY_KEYBOARD)

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with get_connection() as con:
            cur = con.cursor()
            cur.execute("SELECT COUNT(*) FROM reminders")
            reminders_count = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM tasks")
            tasks_count = cur.fetchone()[0]
        
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_count}\n"
            f"‚úÖ –ó–∞–¥–∞—á: {tasks_count}"
        )
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    now = user_now()
    
    try:
        with get_connection() as con:
            cur = con.cursor()
            cur.execute("""
                SELECT title, scheduled_iso, lead_minutes 
                FROM reminders 
                WHERE user_id=? AND sent=0 AND scheduled_iso > ?
                ORDER BY scheduled_iso
            """, (user_id, now.isoformat()))
            rows = cur.fetchall()
    except Exception as e:
        logger.error(f"Database error in show_reminders: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    if not rows:
        await update.message.reply_text(Messages.no_reminders(), reply_markup=REPLY_KEYBOARD)
        return

    reminders_list = []
    for title, scheduled_iso, lead_minutes in rows:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        scheduled_dt = datetime.fromisoformat(scheduled_iso).astimezone(ZoneInfo(Config.TZ))
        time_str = scheduled_dt.strftime('%d.%m.%Y %H:%M')
        reminders_list.append(Messages.reminder_item(title, time_str, lead_minutes))

    message = Messages.reminders_list_header() + "\n\n" + "\n".join(reminders_list)
    await update.message.reply_text(message, reply_markup=REPLY_KEYBOARD)

async def open_calendar_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        data = update.callback_query.data
    else:
        data = "open_calendar:create_reminder"
    
    try:
        _, mode = data.split(":")
    except Exception:
        mode = "view"
    
    now = user_now()
    markup = build_month_keyboard(now.year, now.month, mode=mode)
    text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:"
    
    if update.callback_query:
        await safe_edit_message(update.callback_query.message, text, reply_markup=markup)
    else:
        await update.message.reply_text(text, reply_markup=markup)

async def chmonth_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data
    parts = data.split(":")
    now = user_now()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mode = "create_reminder"
    y = now.year
    m = now.month
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ callback_data
        if len(parts) >= 4:
            if parts[2] == "today":
                # –§–æ—Ä–º–∞—Ç: chmonth:mode:today
                mode = parts[1]
            else:
                # –§–æ—Ä–º–∞—Ç: chmonth:mode:year:month
                mode = parts[1]
                y = int(parts[2])
                m = int(parts[3])
        elif len(parts) == 3 and parts[2] == "today":
            # –§–æ—Ä–º–∞—Ç: chmonth:mode:today
            mode = parts[1]
        elif len(parts) == 3:
            # –§–æ—Ä–º–∞—Ç: chmonth:year:month
            y = int(parts[1])
            m = int(parts[2])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Å—è—Ü
        y, m = normalize_month(y, m)
        
    except Exception as e:
        logger.error(f"Error parsing chmonth callback: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        y, m = now.year, now.month
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
    disable_past = mode != "view_tasks"
    markup = build_month_keyboard(y, m, mode=mode, disable_past=disable_past)
    await safe_edit_message(update.callback_query.message, text=None, reply_markup=markup)

async def day_selection_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data
    
    try:
        _, mode, year, month, day = data.split(":")
        year = int(year)
        month = int(month)
        day = int(day)
    except Exception:
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ callback", show_alert=True)
        return
        
    selected_date = date(year, month, day)
    
    if mode == "create_reminder":
        context.user_data['new_reminder'] = {'year': year, 'month': month, 'day': day}
        await show_hours_page(update.callback_query.message)
        
    elif mode == "view_tasks":
        user_id = update.effective_user.id
        day_iso = selected_date.isoformat()
        
        try:
            with get_connection() as con:
                cur = con.cursor()
                cur.execute("""
                    SELECT description, status 
                    FROM tasks 
                    WHERE user_id=? AND day_iso=?
                    ORDER BY id
                """, (user_id, day_iso))
                rows = cur.fetchall()
        except Exception as e:
            logger.error(f"Database error: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        if not rows:
            txt = f"üìÖ –ó–∞–¥–∞—á–∏ –∑–∞ {day_iso}:\n\n–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É."
        else:
            completed = []
            pending = []
            for desc, status in rows:
                if status == "completed":
                    completed.append(f"‚úÖ {desc}")
                else:
                    pending.append(f"‚ùå {desc}")
            
            txt = f"üìÖ –ó–∞–¥–∞—á–∏ –∑–∞ {day_iso}:\n"
            if completed:
                txt += "\n" + "\n".join(completed)
            if pending:
                txt += "\n" + "\n".join(pending)
        
        back_button = InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="open_calendar:view_tasks")
        await safe_edit_message(
            update.callback_query.message, 
            txt, 
            reply_markup=InlineKeyboardMarkup([[back_button]])
        )
    else:
        await update.callback_query.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º", show_alert=True)

async def show_hours_page(message):
    markup = build_hours_keyboard()
    await safe_edit_message(message, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", reply_markup=markup)

async def hoursel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, hh = update.callback_query.data.split(":")
    hh = int(hh)
    
    if 'new_reminder' not in context.user_data:
        context.user_data['new_reminder'] = {}
    
    context.user_data['new_reminder']['hour'] = hh
    
    kb = [
        [InlineKeyboardButton("00", callback_data="minutesel:0"),
         InlineKeyboardButton("15", callback_data="minutesel:15"),
         InlineKeyboardButton("30", callback_data="minutesel:30"),
         InlineKeyboardButton("45", callback_data="minutesel:45")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="open_calendar:create_reminder")]
    ]
    
    await safe_edit_message(
        update.callback_query.message, 
        f"‚è±Ô∏è –í—ã–±—Ä–∞–Ω —á–∞—Å: {hh:02d}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:", 
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def minute_select_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, mm = update.callback_query.data.split(":")
    mm = int(mm)
    
    if 'new_reminder' not in context.user_data:
        context.user_data['new_reminder'] = {}
    
    context.user_data['new_reminder']['minute'] = mm
    nr = context.user_data['new_reminder']
    
    y, m, d = nr['year'], nr['month'], nr['day']
    h, mi = nr['hour'], mm
    
    kb = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 0 –º–∏–Ω", callback_data="lead:0"),
         InlineKeyboardButton("–ó–∞ 5 –º–∏–Ω", callback_data="lead:5"),
         InlineKeyboardButton("–ó–∞ 10 –º–∏–Ω", callback_data="lead:10")],
        [InlineKeyboardButton("–ó–∞ 30 –º–∏–Ω", callback_data="lead:30"),
         InlineKeyboardButton("–ó–∞ 60 –º–∏–Ω", callback_data="lead:60")],
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_reminder"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="open_calendar:create_reminder")]
    ]
    
    await safe_edit_message(
        update.callback_query.message, 
        f"üìÖ –î–∞—Ç–∞: {d}.{m}.{y}\n‚è∞ –í—Ä–µ–º—è: {h:02d}:{mi:02d}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

async def lead_select_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, lm = update.callback_query.data.split(":")
    lm = int(lm)
    
    if 'new_reminder' not in context.user_data:
        context.user_data['new_reminder'] = {}
    
    context.user_data['new_reminder']['lead'] = lm
    await safe_edit_message(
        update.callback_query.message, 
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º):", 
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="open_calendar:create_reminder")]])
    )
    context.user_data['awaiting_title'] = True

async def confirm_save_reminder_from_title(update: Update, context: ContextTypes.DEFAULT_TYPE, title_text: str):
    if 'new_reminder' not in context.user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=REPLY_KEYBOARD)
        context.user_data.pop('awaiting_title', None)
        return
    
    nr = context.user_data['new_reminder']
    y, m, d = nr['year'], nr['month'], nr['day']
    h, mi = nr.get('hour', 0), nr.get('minute', 0)
    lead = nr.get('lead', 0)
    
    try:
        # –°–æ–∑–¥–∞–µ–º datetime —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        scheduled_local = datetime(y, m, d, h, mi, tzinfo=ZoneInfo(Config.TZ))
    except Exception as e:
        logger.error(f"Invalid datetime: {e}")
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è.", reply_markup=REPLY_KEYBOARD)
        return
    
    if scheduled_local <= user_now():
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è.", reply_markup=REPLY_KEYBOARD)
        context.user_data.pop('awaiting_title', None)
        return
    
    title = title_text.strip() or f"–°–æ–±—ã—Ç–∏–µ {d}.{m}.{y} {h:02d}:{mi:02d}"
    created_iso = user_now().isoformat()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        with get_connection() as con:
            cur = con.cursor()
            cur.execute(
                "INSERT INTO reminders (user_id, title, scheduled_iso, lead_minutes, created_iso) "
                "VALUES (?, ?, ?, ?, ?)",
                (update.effective_user.id, title, scheduled_local.isoformat(), lead, created_iso)
            )
            reminder_id = cur.lastrowid
            con.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        scheduler_manager = context.application.scheduler_manager
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        await scheduler_manager.schedule_reminder(
            reminder_id,
            update.effective_user.id,
            title,
            scheduled_local,
            lead
        )
        
        time_str = scheduled_local.strftime('%d.%m.%Y %H:%M')
        await update.message.reply_text(
            Messages.reminder_created(title, time_str, lead),
            reply_markup=REPLY_KEYBOARD
        )
    except Exception as e:
        logger.error(f"Error saving reminder: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=REPLY_KEYBOARD)
    
    context.user_data.pop('new_reminder', None)
    context.user_data.pop('awaiting_title', None)

async def confirm_reminder_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await safe_edit_message(
        update.callback_query.message, 
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.", 
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="open_calendar:create_reminder")]])
    )

async def today_tasks_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query: 
        await update.callback_query.answer()
    
    user_id = update.effective_user.id
    today_iso = user_now().date().isoformat()
    
    try:
        with get_connection() as con:
            cur = con.cursor()
            cur.execute("""
                SELECT id, description, status, original_day_iso 
                FROM tasks 
                WHERE user_id=? AND day_iso=?
                ORDER BY 
                    CASE WHEN original_day_iso < ? THEN 0 ELSE 1 END,
                    original_day_iso ASC
            """, (user_id, today_iso, today_iso))
            rows = cur.fetchall()
    except Exception as e:
        logger.error(f"Database error: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return
    
    kb = []
    if not rows:
        txt = Messages.no_tasks()
    else:
        tasks_list = []
        for tid, desc, status, original_iso in rows:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É
            date_str = format_original_date(original_iso, today_iso)
                    
            tasks_list.append(Messages.task_item(status == "completed", desc, date_str))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏
            kb.append([InlineKeyboardButton(
                f"{'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if status == 'completed' else '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}: {desc[:20]}", 
                callback_data=f"toggle_task:{tid}"
            )])
        
        txt = Messages.task_list_header() + "\n" + "\n".join(tasks_list)
    
    kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")])
    
    if update.callback_query:
        await safe_edit_message(update.callback_query.message, txt, reply_markup=InlineKeyboardMarkup(kb))
    else:
        await update.message.reply_text(txt, reply_markup=InlineKeyboardMarkup(kb))

async def toggle_task_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, tid = update.callback_query.data.split(":")
    tid = int(tid)
    
    try:
        with get_connection() as con:
            cur = con.cursor()
            cur.execute("SELECT status, user_id FROM tasks WHERE id=?", (tid,))
            row = cur.fetchone()
            
            if not row:
                await safe_edit_message(
                    update.callback_query.message, 
                    "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="today_tasks")]])
                )
                return
            
            status, uid = row
            if uid != update.effective_user.id:
                await update.callback_query.answer("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞.", show_alert=True)
                return
            
            if status == "pending":
                cur.execute(
                    "UPDATE tasks SET status='completed', completed_iso=? WHERE id=?",
                    (user_now().isoformat(), tid)
                )
                new_status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            else:
                cur.execute(
                    "UPDATE tasks SET status='pending', completed_iso=NULL WHERE id=?",
                    (tid,)
                )
                new_status = "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            
            con.commit()
        
        await safe_edit_message(
            update.callback_query.message, 
            f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_status}", 
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="today_tasks")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu")]
            ])
        )
    except Exception as e:
        logger.error(f"Error toggling task: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)

async def add_task_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        context.user_data['adding_task'] = True
        await safe_edit_message(
            update.callback_query.message, 
            "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:", 
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="today_tasks")]])
        )
    else:
        context.user_data['adding_task'] = True
        await update.message.reply_text("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == "üìÖ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await open_calendar_cb(update, context)
        return
    
    if text == "‚úÖ –°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await today_tasks_cb(update, context)
        return
    
    if text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ":
        now = user_now()
        markup = build_month_keyboard(now.year, now.month, mode="view_tasks", disable_past=False)
        await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:", reply_markup=markup)
        return
    
    if text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await show_reminders(update, context)
        return
    
    if text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(Messages.bot_about(), reply_markup=REPLY_KEYBOARD)
        return
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    if context.user_data.get('awaiting_title'):
        await confirm_save_reminder_from_title(update, context, text)
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if context.user_data.get('adding_task'):
        if not text:
            await update.message.reply_text("‚ùå –ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            return
        
        try:
            today_iso = user_now().date().isoformat()
            execute_sql(
                "INSERT INTO tasks (user_id, description, day_iso, created_iso, original_day_iso) "
                "VALUES (:user_id, :description, :day_iso, :created_iso, :day_iso)",
                {
                    "user_id": update.effective_user.id,
                    "description": text,
                    "day_iso": today_iso,
                    "created_iso": user_now().isoformat()
                }
            )
            context.user_data.pop('adding_task', None)
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=REPLY_KEYBOARD)
        except Exception as e:
            logger.error(f"Error adding task: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", reply_markup=REPLY_KEYBOARD)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update.message.reply_text("ü§î –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é —Ä—è–¥–æ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.", reply_markup=REPLY_KEYBOARD)

async def unknown_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()